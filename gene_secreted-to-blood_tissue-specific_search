#Python 3.8.6
import requests
import json
import openpyxl
import math
import re
import os

def sort_tuple(tupl):

    tupl = [(n[0],float(n[1])) for n in tupl]
    tupl.sort(key = lambda x: x[1], reverse = True)
    return tupl

FILE_NAME = "test7_1_just_specific.json"

if os.path.exists(FILE_NAME):
  os.remove(FILE_NAME)


wb = openpyxl.load_workbook("Volcano-Graph.xlsx")
ws = wb.active

f = open(FILE_NAME, 'a')
f.write("[")

tissue_name_enToUkr = {
    "adipose tissue":"Жирова тканина", "adrenal gland":"Надниркова залоза", "amygdala":"Мигдалина", "appendix":"Додаток", "basal ganglia":"Базальні ганглії", "bone marrow":"Кістковий мозок", "breast":"Молочна залоза", "cerebellum":"Мозочок", "cerebral cortex":"Кора головного мозку", "cervix":"Шийки матки", "choroid plexus":"Судинне сплетення", "colon":"Товста кишка", "duodenum":"Дванадцятипала кишка", "endometrium 1":"Ендометрій 1", "epididymis":"Епідидиміс", "esophagus":"Стравохід", "fallopian tube":"Фаллопієва труба", "gallbladder":"Жовчний міхур", "heart muscle":"Серцевий м'яз", "hippocampal formation":"Формування гіпокампу", "hypothalamus":"Гіпоталамус", "kidney":"Нирка", "liver":"Печінка", "lung":"Легені", "lymph node":"Лімфатичний вузол", "medulla oblongata":"Довгастий мозок", "midbrain":"Середній мозок", "ovary":"Яєчник", "pancreas":"Підшлункова залоза", "parathyroid gland":"Паращитовидна залоза", "pituitary gland":"Гіпофіз", "placenta":"Плацента", "pons":"Міст", "prostate":"Простата", "rectum":"Пряма кишка", "retina":"Тканина рнк - сітківка", "salivary gland":"Слинна залоза", "seminal vesicle":"Насіннєвий пухирець", "skeletal muscle":"Скелетні м'язи", "skin 1":"Рнк тканини - шкіра 1", "small intestine":"Тонка кишка", "smooth muscle":"Гладка мускулатура", "spinal cord":"Спинний мозок", "spleen":"Селезінка", "stomach 1":"Шлунок 1", "testis":"Сім'яники", "thalamus":"Таламус", "thymus":"Тимус", "thyroid gland":"Щитовидна залоза", "tongue":"Язик", "tonsil":"Мигдалина", "urinary bladder":"Сечовий міхур", "vagina":"Піхва", "white matter":"Біла речовина"
}
specificity_category_enToUkr = {
    "Tissue enriched":"Збагачений у тканині",
    "Group enriched":"Збагачений у групі тканин",
    "Tissue enhanced":"Підвищений у тканині",
    "Low tissue specificity":"Низької тканиноспецифічності",
    "Not detected":"Не виявлений у тканинах"
}
secretome_location_enToUkr = {
    "None":"Не секретується",
    "Secreted - unknown location":"Невідомо",
    "Intracellular and membrane":"Внутрішньоклітинна та до мембрани",
    "Secreted in female reproductive system":"Жіноча статева система",
    "Secreted to blood":"Кров",
    "Secreted to extracellular matrix":"Позаклітинний матрикс",
    "Secreted in other tissues":"Інші тканини",
    "Secreted in brain":"Мозок",
    "Secreted to digestive system":"Травна система"
}
progress = 0


for row in ws.iter_rows(min_row=2):
    
    url = 'https://www.proteinatlas.org/api/search_download.php?search='+str(row[2].value)+'+'+str(row[1].value)+'&format=json&columns=g,eg,rnats,secl,t_RNA_adipose_tissue,t_RNA_adrenal_gland,t_RNA_amygdala,t_RNA_appendix,t_RNA_basal_ganglia,t_RNA_bone_marrow,t_RNA_breast,t_RNA_cerebellum,t_RNA_cerebral_cortex,t_RNA_cervix,t_RNA_choroid_plexus,t_RNA_colon,t_RNA_duodenum,t_RNA_endometrium_1,t_RNA_epididymis,t_RNA_esophagus,t_RNA_fallopian_tube,t_RNA_gallbladder,t_RNA_heart_muscle,t_RNA_hippocampal_formation,t_RNA_hypothalamus,t_RNA_kidney,t_RNA_liver,t_RNA_lung,t_RNA_lymph_node,t_RNA_medulla_oblongata,t_RNA_midbrain,t_RNA_ovary,t_RNA_pancreas,t_RNA_parathyroid_gland,t_RNA_pituitary_gland,t_RNA_placenta,t_RNA_pons,t_RNA_prostate,t_RNA_rectum,t_RNA_retina,t_RNA_salivary_gland,t_RNA_seminal_vesicle,t_RNA_skeletal_muscle,t_RNA_skin_1,t_RNA_small_intestine,t_RNA_smooth_muscle,t_RNA_spinal_cord,t_RNA_spleen,t_RNA_stomach_1,t_RNA_testis,t_RNA_thalamus,t_RNA_thymus,t_RNA_thyroid_gland,t_RNA_tongue,t_RNA_tonsil,t_RNA_urinary_bladder,t_RNA_vagina,t_RNA_white_matter&compress=no'
    hpa_r = requests.get(url, allow_redirects=True)
    hpa_r = hpa_r.content.decode('utf-8')

    progress += 1
    
    if len(hpa_r)>10:
    
        tissues_nTPM_startChar = hpa_r.find("\"Secretome location\"") #find where data we're interested in showing ends
        tissues_nTPM_startChar = hpa_r.find(",",tissues_nTPM_startChar+len("\"Secretome location\""))      #via finding first comma after the last parameter we're showing 

        tissues_nTPM_json = "{" + hpa_r[tissues_nTPM_startChar+1:-1]
        tissues_nTPM = re.findall(r"A - (.+?) \[nTPM\]\":\"(.+?)\"", tissues_nTPM_json) #reformat string to array of tuples "(tissue,nTPM)"
        tissues_nTPM = sort_tuple(tissues_nTPM)                                   #sorting from biggest to smallest and converting nTPM to float
        
        gene_info = json.loads(hpa_r[1:tissues_nTPM_startChar] + "}")
        gene_output = {
            "Символ гена":gene_info["Gene"],
            "Код Ensembl":gene_info["Ensembl"],
            "lgFC":round(row[4].value,3),
        }
            
        average_nTPM = math.fsum(n[1] for n in tissues_nTPM)/len(tissues_nTPM) #average RNA expression in tissues
        specific_tissues_nTPM = [n for n in tissues_nTPM if n[1]/4 >= average_nTPM]     #keeping tissues in which RNA expression is at least 4 times higher
                                    #ratios of expression to the average

        if len(specific_tissues_nTPM)>0:
            specific_tissues_ratioDictionary = {}
            for n in specific_tissues_nTPM:
                specific_tissues_ratioDictionary[tissue_name_enToUkr[str(n[0])]]=str(round(n[1]/average_nTPM,3)).replace(".",",",1)
            gene_output["Відношення концентрації мРНК у тканинах до середнього значення"]=specific_tissues_ratioDictionary
        else:
            gene_output["Відношення концентрації мРНК у тканинах до середнього значення"] = "null"

        
        gene_output["Категорія тканиноспецифічності за HPA"] = specificity_category_enToUkr[gene_info["RNA tissue specificity"]]
                
        max_tissue_nTPM = math.log10(tissues_nTPM[0][1]+1)
        gene_output["Тау-критерій"] = round(math.fsum(((1-math.log10(n[1]+1)/max_tissue_nTPM)) for n in tissues_nTPM)/(len(tissues_nTPM)-1),3)

        gene_output["lgFC"] = str(gene_output["lgFC"]).replace(".",",",1)
        gene_output["Тау-критерій"] = str(gene_output["Тау-критерій"]).replace(".",",",1)

        #print("Symbol:" + str(gene_info["Gene"]) + ", Subcellular:" + str(gene_info["Subcellular location"]) + ", Secretome:" + str(gene_info["Secretome location"]) + ", Blood pg/L, IM/MS:" + str(gene_info["Blood concentration - Conc. blood IM [pg/L]"]) + " / " + str(gene_info["Blood concentration - Conc. blood MS [pg/L]"]) + ", ecblood:" + str(gene_info["Blood expression cluster"]))
        
        """if isinstance(gene_info["Secretome location"],str) and ("blood" in gene_info["Secretome location"]):
            if "Плацента" in str(gene_output["Відношення концентрації мРНК у тканинах до середнього значення"]):
                f.write(json.dumps(gene_output))
                if (progress < ws.max_row-2):
                    f.write(",\n")"""

        gene_output["Місце, куди секретується білок"]=secretome_location_enToUkr[str(gene_info["Secretome location"])]
        
        if "Плацента" in str(gene_output["Відношення концентрації мРНК у тканинах до середнього значення"]):
            f.write(json.dumps(gene_output))
            if (progress < ws.max_row-2):
                f.write(",\n")

    print(str(round(progress/(ws.max_row-1)*100,2)) + "% done")


f.write("]")
f.close()
